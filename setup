#!/bin/sh
#
# setup:	B2G setup script
# author:	Dan Hanson 
#
# description:	This is a program to be run as root, that will build the needed IP configuration for the B2G virtual appliance.

function valid_ip()
{
    local  ip=$1
    local  stat=1

    if [[ $ip =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]]; then
        OIFS=$IFS
        IFS='.'
        ip=($ip)
        IFS=$OIFS
        [[ ${ip[0]} -le 255 && ${ip[1]} -le 255 \
            && ${ip[2]} -le 255 && ${ip[3]} -le 255 ]]
        stat=$?
    fi
    return $stat
}

function valid_mask()
{
    local stat=1
    
    echo $1 | grep -w -E -o '^(254|252|248|240|224|192|128)\.0\.0\.0|255\.(254|252|248|240|224|192|128|0)\.0\.0|255\.255\.(254|252|248|240|224|192|128|0)\.0|255\.255\.255\.(254|252|248|240|224|192|128|0)' > /dev/null
    stat=$?
    return $stat
}

echo " "
if [ -f "./.configured-ip" ]
then
	echo "*****B2G Virtual Appliance Re-write Basic Setup*****"
else
	echo "*****B2G Virtual Appliance Initial Basic Setup*****"
fi	
echo " "

# We loop through here.  Show any defaults already setup
commitOrExit=0
ipmethod="static"
lastmethodInput=2
ipaddr="x.x.x.x"
ipmask="255.255.255.0"
defgw="x.x.x.x"
pridns="none"
secdns="none"
ntpaddr="none"
myhostnm="aciucs-1-0-1f"

while [ $commitOrExit -eq 0 ]
do
    # first we prompt for the IP address method
    methodInput=0
    echo -n "Enter IP address method [dhcp|static] ($ipmethod): "
    read inipmethod
    if [ -z $inipmethod ]; then
        methodInput=$lastmethodInput
    else
        if [ $inipmethod = "dhcp" ]; then
            ipmethod=$inipmethod
            methodInput=1
            lastmethodInput=1
        fi
        if [ $inipmethod = "static" ]; then
            ipmethod=$inipmethod
            methodInput=2
            lastmethodInput=2
        fi
    fi
    if [ $methodInput -eq 0 ]; then
    	echo "invalid input, starting again..."
    	continue
    fi
    
    # now we have the methods to see what else we need to ask
    if [ $methodInput -eq 2 ]; then
    	validIP=0
    	while [ $validIP -eq 0 ]
    	do
            echo -n "Enter static IP ($ipaddr): "
            read inipaddr
            if [ -z $inipaddr ]; then
                inipaddr=$ipaddr
            fi
            if valid_ip $inipaddr; then
                ipaddr=$inipaddr
                validIP=1
            else
                echo "IP: $inipaddr is bad, please re-enter"
            fi
	done

	validMask=0
	while [ $validMask -eq 0 ]
	do
            echo -n "Enter the subnet mask ($ipmask): "
            read inipmask
            if [ -z $inipmask ]; then
                inipmask=$ipmask
            fi
            if valid_mask $inipmask; then 
                ipmask=$inipmask
		validMask=1
            else 
                echo "Mask: $inipmask is bad, please re-enter"
	    fi
	done

	validGW=0
	while [ $validGW -eq 0 ]
	do
            echo -n "Enter the default gateway ($defgw): "
            read indefgw
            if [ -z $indefgw ]; then
                indefgw=$defgw
            fi
            if valid_ip $indefgw; then
                defgw=$indefgw
                validGW=1
            else
                echo "Default GW: $indefgw is bad, please re-enter"
            fi
	done

	# now get the dns server(s)
	validDNS1=0
	while [ $validDNS1 -eq 0 ]
	do
            echo -n "Enter the IP of the primary DNS server ($pridns): "
            read inpridns
            if [ -z $inpridns ]; then
                # here can have the case of none also
                if [ $pridns = "none" ]; then
		    echo "Primary DNS server empty"
                    validDNS1=2
                else 
                    # was already validated to make it to the pridns
                    validDNS1=1
                fi
            else
                # it is a valid entry typed in
                if valid_ip $inpridns; then 
                    validDNS1=1
                    pridns=$inpridns
		else
		    echo "DNS1: $inpridns is bad, please re-enter"
		fi
	    fi
	done

	validDNS2=0
	while [ $validDNS2 -eq 0 ]
	do
	    echo -n "Enter the IP of the secondary DNS server ($secdns): "
	    read insecdns
            if [ -z $insecdns ]; then
                # here can have the case of none also
                if [ $secdns = "none" ]; then
		    echo "Secondary DNS server empty"
                    validDNS2=2
                else
                    # was already validated to make it to the secdns
                    validDNS2=1
                fi
            else
                # it is a valid entry typed in
                if valid_ip $insecdns; then 
                    validDNS2=1
                    secdns=$insecdns
		else
		    echo "DNS1: $insecdns is bad, please re-enter"
		fi
	    fi
	done
    fi

    # now get the ntp server
    validNTP=0
    while [ $validNTP -eq 0 ]
    do
	echo -n "Enter the IP of the NTP server ($ntpaddr): "
	read inntpaddr
        if [ -z $inntpaddr ]; then
            # here can have the case of none also
            if [ $ntpaddr = "none" ]; then
	        echo "NTP server empty"
                validNTP=2
            else
                # we aready have validated to make to the ntpaddr
                validNTP=1
            fi
        else
            # it is a valid entry typed in
            if valid_ip $inntpaddr; then 
                validNTP=1
                ntpaddr=$inntpaddr
	    else
		echo "NTP: $inntpaddr is bad, please re-enter"
	    fi
        fi
    done

    # now get the hostname
    echo -n "Enter the B2G virtual appliance hostname ($myhostnm): "
    read inmyhostnm
    if [ -z "$inmyhostnm" ]; then
	echo "Empty input, setting the hosthame to: $myhostnm"
    else
	echo "Setting the hostname to: $inmyhostnm"
        myhostnm=$inmyhostnm
    fi


    # now display the configuration, and commit or redo
    echo "---------------------------------------------------"
    echo "You entered the data below:"
    echo " "
    echo "IP configuration method: $ipmethod"
    if [ $methodInput -eq 2 ]; then
	echo "IP Address: $ipaddr"
	echo "Netmask Bits: $ipmask"
	echo "Default Gateway: $defgw"
	echo "Primary DNS Server: $pridns"
	echo "Secondary DNS Server: $secdns"
    fi
    echo "NTP Server: $ntpaddr"
    echo "B2G Virtual Appliance Hostname: $myhostnm"
    echo " "
    echo "Note:  The system is set to UTC timezone (and B2G itself just uses UTC).  Instead of presenting a list of ~700 possibilities here,"
    echo "       just copy the file from /usr/share/zoneinfo (under one of the region directories) to overwrite the /etc/localtime file."
    echo " "
    echo "---------------------------------------------------"
    echo "Enter 1 to commit this, 2 to start over, or just enter to exit"
    read finalaction

    if [ $finalaction -eq 1 ]; then
	echo "Writing networking files and restarting...."
	/bin/cp common-ntp.conf ntp.conf
        if [ $validNTP -eq 1 ]; then
            echo "restrict $ntpaddr mask 255.255.255.255 nomodify notrap noquery" >> ntp.conf
            echo "server $ntpaddr" >> ntp.conf
        fi
	/bin/cp common-ifcfg-ens32 ifcfg-ens32
	if [ $methodInput -eq 1 ]; then
	    echo "BOOTPROTO=\"dhcp\"" >> ifcfg-ens32
	fi
	if [ $methodInput -eq 2 ]; then
	    echo "BOOTPROTO=\"none\"" >> ifcfg-ens32
            echo "IPADDR0=\"$ipaddr\"" >> ifcfg-ens32
            echo "NETMASK0=\"$ipmask\"" >> ifcfg-ens32
            echo "GATEWAY0=\"$defgw\"" >> ifcfg-ens32
            if [ $validDNS1 -eq 1 ]; then
		echo "DNS1=\"$pridns\"" >> ifcfg-ens32
	    fi
            if [ $validDNS2 -eq 1 ]; then
		echo "DNS2=\"$secdns\"" >> ifcfg-ens32
	    fi
	fi
        # now set the hostname
	hostname $myhostnm
        # now copy the ifcfg-ens32 to /etc/sysconfig/network-scripts
        /bin/cp ifcfg-ens32 /etc/sysconfig/network-scripts/ifcfg-ens32
        # now copy the ntp.conf to /etc
        /bin/cp ntp.conf /etc/ntp.conf
        # now set the file so this is not automatically called on root login
	if [ $methodInput -eq 1 ]; then
	    echo "dhcp" > ./.configured-ip
	fi
	if [ $methodInput -eq 2 ]; then
            echo $ipaddr > ./.configured-ip
        fi
        # now restart the network processes
        service network restart
        
	echo "Complete."
        commitOrExit=1
    fi
    if [ -z $finalaction ]; then
        echo "Nothing done, exiting"
        exit
    fi
done
