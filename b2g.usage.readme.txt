// The form of this file is a leading // with a space, to indicate a comment line

// This php code is developed by Dan Hanson on a framework developed by Roger Andersson to outline the use cases for making UCSM and CIMC servers operate better together
// when connected to an ACI fabric.  This is coded with much repitiion, in hopes of making the reading of this code easy, and it is easy to understand what is going on.
// This is not optimized in terms of reducing the numbers of lines, and things are repeated.
// This currently handles a single APIC, a single UCS domain, and multiple C servers.  Any can be extended by changing the references to arrays.

// This is a community supported item, and please use the internal Cisco mailer:  aci-ucs-b2g@cisco.com

// ***IMPORTANT NOTES***
// 1)  ACI Interface Policy Profiles, groups the leafs in a vPC with the interfaces via policy.  This means a given UCS FI need to consume the same ports on the ACI leafs
//     for a vPC to form.  This means for a given FI-A, we can use any FI port like 17-21 (example), connected to ports 32,33 (example) on each leaf.
//     for the other FI, connect FI ports like 17-21 (example) to ports 34,35 (example) on each leaf.  This example would have 4 uplinks from each FI.

// USER STORIES:
// 0 = VPC to UCS (the other cases below all assume this has been run to setup the VPC's first as day0 operation)
// 1 = VMM on UCS
// 2 = VMM on UCS with VXLAN passing
// 3 = Bare Metal on UCS
// 4 = SPAN coordination with UCS
// 5 = UCS RACK Bare Metal
// With the majority of UCS systems tied to ACI fabric - case 10 should be setup
// 10 = 0,1,2,3,4 (all UCSM user stories runing within the threads of this process)          (alternatively we can run each in a separate process & dir for deeper inspection)

// Top Sizing:
//      userstory       X5570 CPU%     memory      15 min load avg (on 16 core C250)
//          0               240%        0.0%             1.15
//          1               220%        0.0%              .95
//          2               220%        0.0%              .95
//          3               280%        0.0%             1.82
//          4               210%        0.0%              .98
//          5               190%        0.0%              .78
//         10               285%        0.0%             2.57
userstory: 5

// Here we signal if this will be running in a simluator environment (the APIC and UCSM are on simulators) or the real hardware.  Since there are no physical cables
// between these virutal simulators where LLDP is exchanged, we just manually set those ports here.  When the UCS admin configures a VPC of the right ID (the simVPCkey) on a given fabric,
// the system will match up a port on first leaf in the pair (of 2 leafs that the simulator offers as of this publishing) starting at the seed port number, then next uplink goes to peer leaf in the VPC pair.
// Third uplink will go back to other leaf, and 4th to the latter.  This means if you set 4 uplink ports on FIA in the UCSM simulator, 2 will be on the ports (seed,seed+1) on each leaf.
// Valid values are [real|simulated] with the default being real.  When we are in a simulated environment, we also set a SPAN virtual cable port number to map to UCS FI (1 that is the same per leaf).
environmentType: real
simFIA-LeafPortSeed: 20
simFIB-LeafPortSeed: 24
simLeafSpanPort: 10
simVPCkey: 35
simSPANkey: 5

// Setup the UCS Domains to AEP instances.  Here we give the AEP name to use, its underlying vSwitch policy (must be MAC PIN for UCS) for all the UCS instances
// (Blade and CIMC rack) that are to utilize this same AEP.  You do not need to configure this first on the APIC - this tool will read from this file and write on the APIC.
UCSgroupAEPname: B2G-managed-UCS
UCSvSwitchPolicyName: UCS-vSwitch-MAC-Pin

// The UCSM domain can have sets of uplink ports connected to different network devices and maintain segmentation on them.  UCSM does not support overlapping VLAN ID's for these segments today.
// Set this to true if you want B2G to do the Dis Joint L2 mappings on the UCS domain for the VLAN backed EPG's on the right uplinks.  False means you want to accept defaults, or do it yourself.
// Note:  if you want other ethernet segments (not counting FCoE uplinks, etc.) to be on other UCS ports, you need to ensure the Dis Joint L2 is setup right in the Lan Uplinks Manager within UCSM
manageDJL2: true

// Set to true if you want B2G to handle the APIC to vShield needed mappings for the created VXLAN backed EPG's.  This includes setting (within the bridge domain of the infra VLAN) a DHCP server of
// the APIC so that your new VTEP interfaces created on the ESX hosts will pull a DHCP configuration on the right vmk to match the APIC needs, so that the tunnels from the ACI nodes to each ESX host will work.
// As of this version, we do not set the VXLAN pool, nor the multicast pools as these are set in vShield, and already assumed to be setup on the APIC (there is nothing unique to UCS in this need).
// Setting this to false means you want to accept defaults, or do it yourself.
manageAPICVTEP: true

// Set to true if you want B2G to keep the bridge domain for the EPG's mapped to a VMM domain updated with the L2 UU flooding.  False means you want to accept defaults, or do it yourself.
// NOTE:  In the current version, this flag does nothing as we dont want to get into finding the EPG BD's when they are mapped to a VMM domain with a DVS - this is just a placeholder in case we do in future.
manageVMMUUflooding: false

// This is the number of seconds to wait on B2G program startup, before allowing the domain attachment to EPG events to be consumed.  This timer is needed when we startup the process, to ensure
// stability in the deployment of VLANs that the B2G process utilizes from the pools.  The program will wait for this time for all incoming information to be learned before writing actions on APIC.
physDomainStartupDelay: 30

// APIC Domain to Utilize (1 supported)
// ***This needs to be at v1.0(1k) or later***
// David's APIC Controller
apicip: 172.25.180.32
apicuser: admin
apicpwd: nbv_12345

// Dans APIC Simulator
//apicip: 192.168.1.241
//apicuser: admin
//apicpwd: nbv_12345

// UCS Domains to Utilize (1 supported as of this version - 1.0.1f)
// ***These need to be at v2.2(4) or later***
// David's UCS
//ucsmip: 172.25.180.8
//ucsmuser: admin
//ucsmpwd: nbv_12345

// Dan's LAB UCS
ucsmip: 172.25.177.226
ucsmuser: admin
ucsmpwd: nbv_12345       

// Dan's UCS Simulator
//ucsmip: 192.168.1.138
//ucsmuser: admin
//ucsmpwd: nbv_12345       

// Logging Operations by user story
logGeneraloperations: true
logBareMetaloperations: true
logVMMoperations: true
logVPCoperations: true
logSPANoperations: true
logRackoperations: true
logUCSMevents: false
logDoerCalls: true

// UCS and CIMC Backing VLAN Setups.  You do not need to set these up in APIC first, as the tool writes these pools on APIC after reading this initialization file.  This is because a given AEP
// cannot have overlapping pools of VLAN ID's.  Leave room here for other unique VLAN ID needs (say for a VXLAN VMM domain on the system - where you by default also bring in VLAN bindings).
// Note, do not include the VXLANtransportVLAN in the UCSM pool - put it outside the main pool
ucsmVXLANtransportVLAN: 3000
ucsmVLANpoolmin: 1701
ucsmVLANpoolmax: 2999
cimcVLANpoolmin: 3001
cimcVLANpoolmax: 4092

// UCS Standalone C Server Instances - used only in user story 5.
// This program currently does not do any control of UCS C series rack servers running a hypervisor - this program is for Bare Metal OS installations currently only.
// There is no current programmed limit on count supported, but we assume the order of ip/user/pwd then next device
// ***These need to be at v2.0(4) or later***
cserverip: 172.25.177.130
cserveruser: admin
cserverpwd: password
cserverip: 172.25.177.131
cserveruser: admin
cserverpwd: password
